# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-08 12:49
from __future__ import unicode_literals

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid

import third_party.ticket_service.models.ticket_service


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('payment_service', '0001_initial'),
        ('event', '0001_initial'),
        ('location', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TicketService',
            fields=[
                ('id', models.SlugField(max_length=32, primary_key=True, serialize=False, verbose_name='Идентификатор')),
                ('title', models.CharField(max_length=64, verbose_name='Название')),
                ('slug', models.CharField(choices=[('superbilet', 'СуперБилет'), ('radario', 'Радарио')], max_length=32, verbose_name='Сервис продажи билетов')),
                ('is_active', models.BooleanField(default=False, verbose_name='Работает')),
                ('settings', models.TextField(default=third_party.ticket_service.models.ticket_service.default_json_settings_callable, verbose_name='Настройки в JSON')),
                ('domain', models.ForeignKey(db_column='domain_id', on_delete=django.db.models.deletion.CASCADE, to='location.Domain', verbose_name='Сайт')),
                ('payment_service', models.ForeignKey(blank=True, db_column='payment_service_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='payment_service.PaymentService', verbose_name='Сервис онлайн-оплаты')),
            ],
            options={
                'verbose_name': 'сервис продажи билетов',
                'verbose_name_plural': 'сервисы продажи билетов',
                'db_table': 'third_party_ticket_service',
                'ordering': ('slug', 'title'),
            },
        ),
        migrations.CreateModel(
            name='TicketServiceSchemeVenueBinder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ticket_service_scheme_id', models.PositiveIntegerField(verbose_name='ID схемы зала')),
                ('ticket_service_scheme_title', models.CharField(max_length=128, verbose_name='Название схемы зала')),
                ('scheme', ckeditor.fields.RichTextField(default='', help_text="<p>Схема зала в HTML создаётся, как правило, на основе таблиц. Возможно использование SVG в тех случаях, когда это необходимо.</p><p>У родительского элемента всей схемы зала (<em>&lt;table&gt;</em> или <em>&lt;svg&gt;</em>) обязательно указывать класс <em>stagehall</em>.</p><p>Схемы бывают 2-х типов:</p><ul><li><strong>обычная схема зала</strong>, в которой содержатся места для выбора покепателем.</li><li><strong>посекторная схема зала</strong> со ссылками на схемы отдельных секторов, которые добавляются отдельно и связываются с этой посекторной схемой.</li></ul><p>Посекторную схему имеете смысл создавать, если зал в сервисе продажи билетов достаточно большой и одновременное открытие всего зала сразу на шаге 1 неудобно для покупателя.</p><p><strong>Сначала</strong> создаётся и сохраняется посекторная схема, а <strong>затем</strong> в привязке к ней добавляются содержащися в ней секторы.</p><p>В посекторной схеме нужно добавлять кнопки со ссылками на открытие схем всех её секторов. Для этого ячейка с классом <em>sector</em> должна содержать тег <strong>span</strong> с классом <em>sector-button</em>, а внутри него - радиокнопка (тег <strong>input</strong> с атрибутами <strong>type</strong>='<em>radio</em>' и <strong>name</strong>='<em>sectors</em>') с идентификатором <em>sector-NNN</em> и привязанный к радиокнопке <strong>label</strong> c атрибутом <strong>for</strong>='<em>sector-NNN</em>', содержащий название сектора. <em>NNN</em> - это идентификатор схемы конкретного сектора в базе данных сайта.</p><p>Идентификатор схемы сектора в базе данных сайта НЕ обязательно должен совпадать с идентификатором сектора в сервисе продажи билетов. Возможно создать несколько схем сектров, содержащих места одного сектора в сервисе продажи билетов (например, в Зелёном театре в Воронеже), если сектор визуально явно разбит на разные группы мест. В этом случае, разные группы мест в секторе, например, <em>123</em> будут хранится в разных схемах секторов, например, <em>1231</em>, <em>1232</em> и <em>1233</em>.</p><br><p>Для специфических элементов схемы зала/сектора указываются соответствующие классы:</p><ul><li><em>stage</em> - сцена,</li><li><em>sector</em> - название сектора, номер ряда или прочее примечание,</li><li><em>seat</em> - кликабельное место, которое также содержит <strong>data</strong>-атрибуты места из схемы в сервисе продажи билетов:<ul><li><strong>data-sector-id</strong> - идентификатор сектора,</li><li><strong>data-row-id</strong> - идентификатор ряда,</li><li><strong>data-seat-id</strong> - идентификатор места.</li></ul></li></ul><p>Остальные <strong>data</strong>-атрибуты (в первую очередь цена) подгружаются к каждому доступному для заказа месту при обновлении схемы зала на шаге 1 заказа билетов.</p><br><p>Секторы с местами без фиксированной рассадки удобно делать пунктами <em>li</em> маркированных списков <em>ul</em> с классом <em>no-fixed-seats</em>. Если в настройках сервиса продажи билетов указана опция <em>hide_sold_non_fixed_seats</em> в значением <em>true</em>, тогда после загрузки страницы видимыми останутся только свободные места в продаже, а оставшиеся без возможности продажи места будут скрыты.</p><p>Если в сервисе продажи билетов у мест без фиксированной рассадки нет уникальных идентификаторов (Радарио), в схеме зала создаётся необходимое количество мест, у которых <strong>data-sector-id</strong> и <strong>data-row-id</strong> равны <em>0</em>, а <strong>data-seat-id</strong> нумеруются по порядку, начиная с <em>1</em>.</p>", verbose_name='Схема зала')),
                ('event_venue', models.ForeignKey(blank=True, db_column='event_venue_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='event.EventVenue', verbose_name='Зал')),
                ('ticket_service', models.ForeignKey(db_column='ticket_service_id', on_delete=django.db.models.deletion.CASCADE, to='ticket_service.TicketService', verbose_name='Сервис продажи билетов')),
            ],
            options={
                'verbose_name_plural': 'схемы залов',
                'verbose_name': 'схема зала',
                'db_table': 'third_party_ticket_service_scheme_venue_binder',
                'ordering': ('ticket_service', 'ticket_service_scheme_id', 'event_venue'),
            },
        ),
        migrations.AddField(
            model_name='ticketservice',
            name='schemes',
            field=models.ManyToManyField(blank=True, related_name='schemes', through='ticket_service.TicketServiceSchemeVenueBinder', to='event.EventVenue', verbose_name='Схемы залов'),
        ),
        migrations.AlterUniqueTogether(
            name='ticketserviceschemevenuebinder',
            unique_together=set([('ticket_service', 'ticket_service_scheme_id')]),
        ),
    ]
