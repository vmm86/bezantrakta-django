from collections import namedtuple
from decimal import Decimal

from abc import ABC, abstractmethod, abstractproperty


class TicketService(ABC):
    """Абстрактный класс-родитель конкретных классов любой системы продажи билетов.

    Перечисленные в этом классе абстрактные методы обязательно должны:

    * реализовываться в каждом дочернем классе;
    * возвращать одинаковые структуры данных (с одинаковыми ключами, содержащими одинаковые типы данных).
    """
    # Фабрика для создания выходных параметров в ответах методов API
    internal = namedtuple('InternalParameter', 'key type default_value')
    internal.__new__.__defaults__ = (None,) * len(internal._fields)

    @abstractproperty
    def bar_code_length(self):
        """Длина штрих-кода в конкретном сервисе продажи билетов."""
        pass

    def __init__(self):
        """Конструктор класса."""
        super().__init__()

    def __str__(self):
        return self.__class__.__name__

    def decimal_price(self, value):
        """Преобразование входного значения в денежную сумму с 2 знаками после запятой (копейки) типа ``Decimal``.

        Args:
            value (str): Входное значение (в любом случае строка - для обхода проблем с округлением ``float``).

        Returns:
            Decimal: Денежная сумма.
        """
        return Decimal(str(value)).quantize(Decimal('1.00'))

    def total_plus_extra(self, tickets, total, extra):
        """Общая сумма заказа с учётом сервисного сбора.

        Если процент сервисного сбора ``extra`` больше ``0``,
        то к общей сумме заказа добавляется указанный процент от цены каждого из билетов в заказе.
        Если процент сервисного сбора равен ``0``, т.е. не используется, мы получаем ту же самую сумму.

        Args:
            tickets (list): Список билетов в заказе.
            total (Decimal): Сумма цен на билеты в заказе.
            extra (Decimal): Процент сервисного сбора.
        """
        total_plus_extra = total
        if extra > 0:
            for ticket in tickets:
                total_plus_extra += ((self.decimal_price(ticket['price']) * extra) / 100)
        return total_plus_extra

    def total_plus_courier_price(self, total, courier_price):
        """Общая сумма заказа с учётом стоимости доставки курьером.

        Стоимость доставки курьером добавляется к сумме заказа, если она не равна 0.
        Если стоимость доставки курьером равна ``0``, т.е. бесплатна, мы получаем ту же самую сумму.

        Args:
            total (Decimal): Сумма цен на билеты в заказе.
            courier_price (Decimal): Стоимость доставки курьером.

        Returns:
            Decimal: Общая сумма заказа.
        """
        return total + courier_price

    @abstractmethod
    def version(self):
        """Версия API сервиса продажи билетов.

        Returns:
            str: Версия API.
        """
        pass

    @abstractmethod
    def discover_schemes(self):
        """Получение схем залов для записи в БД.

        Returns:
            list: Список словарей с информацией о схеме зала.

                Содержимое результата:
                    * scheme_id (int):    Идентификатор схемы зала.
                    * scheme_title (str): Название схемы зала.
        """
        pass

    @abstractmethod
    def discover_groups(self):
        """Получение списка групп событий для записи в БД.

        Returns:
            list: Список словарей с информацией о группах событий.

                Содержимое результата:
                    * group_id (int):            Идентификатор.
                    * group_title (str):         Название.
                    * group_datetime (datetime): Дата и время (из самого раннего события в группе).
                    * group_text (str):          Описание (из самого раннего события в группе).
                    * group_min_price (Decimal): Минимальная цена билета (из самого раннего события в группе).
                    * scheme_id (int):           Идентификатор схемы зала.
        """
        pass

    @abstractmethod
    def discover_events(self):
        """Получение списка событий для записи в БД.

        Returns:
            list: Список словарей с информацией о событиях.

                Содержимое результата:
                    * event_id (int):            Идентификатор события.
                    * event_title (str):         Название события.
                    * event_datetime (datetime): Дата и время события.
                    * event_text (str):          Описание события.
                    * event_min_price (Decimal): Минимальная цена билета в событии.
                    * event_min_age (int):       Ограничение по возрасту (по умолчанию ``0``).
                    * group_id (int):            Идентификатор группы событий.
                    * scheme_id (int):           Идентификатор схемы зала.
        """
        pass

    @abstractmethod
    def seats_and_prices(self):
        """Доступные для продажи места в событии и список цен на билеты.

        Args:
            event_id (int):  Идентификатор события.

        Returns:
            dict: Словарь, содержащий словарь ``seats`` и список ``prices``.

                Содержимое результата:
                    * seats (dict): Доступные для продажи места в событии (ключти словаря - ``ticket_id``).
                        * ticket_id (str): Идентификатор билета (свободного места для резерва).
                        * sector_id (int): Идентификатор сектора.
                        * sector_title (str): Название сектора (может браться из названия группы цен).
                        * row_id (int): Идентификатор ряда.
                        * seat_id (int): Идентификатор места.
                        * seat_title (str): Название места (может совпадать с идентификатором места).
                        * price (Decimal): Цена.
                        * price_order (int): Порядковый номер цены в списке цен события ``prices`` по возрастанию.
                    * prices (list): Список цен на билеты (decimal.Decimal), упорядоченный по возрастанию.
        """
        pass

    @abstractmethod
    def reserve(self, **kwargs):
        """Добавление или удаление места в предварительном резерве мест (корзина заказа).

        Метод возвращает передаваемые ему аргументы с подтверждением успешного или НЕуспешного результата.

        Резерв хранится на серверной стороне в файловом кэше и при создании заказа сохраняется в БД сайта.

        Args:
            event_id (int): Идентификатор события.
            order_uuid (str): Уникальный UUID заказа, а также номер сессии (только СуперБилет).
            ticket_id (str): Идентификатор билета (свободного места для резерва).
            action (str): Действие (``add`` - добавить в резерв, ``remove`` - удалить из резерва).

        Returns:
            dict: Атрибуты места (входные аргументы) с подтверждением успешного или НЕуспешного резерва.

                Содержимое результата:
                    * success (bool): Успешный (``True``) или НЕуспешный (``False``) результат.
                    * event_id (int): Идентификатор события.
                    * order_uuid (str): Уникальный UUID заказа.
                    * ticket_id (str): Идентификатор билета (свободного места для резерва).
                    * action (str): Действие.
        """
        pass

    @abstractmethod
    def ticket_status(self, **kwargs):
        """Проверка состояния места (перед созданием заказа или перед онлайн-оплатой).

        Акткуально для СуперБилет, в Радарио в любом случае отдаёт успешный ответ.

        Args:
            event_id (int): Идентификатор события.
            ticket_id (str): Идентификатор билета.

        Returns:
            dict: Информация о состоянии места.

                Содержимое результата:
                    * success (bool): Успешный (``True``) или НЕуспешный (``False``) результат.
                    * status (str): Статус места.
        """
        pass

    @abstractmethod
    def order_create(self, **kwargs):
        """Создание заказа из предварительно зарезервированных мест.

        Args:
            event_id (int): Идентификатор события.
            order_uuid (str): Уникальный UUID заказа (на данный момент генерируется на клиенте).
            customer (dict): Реквизиты покупателя.
                Содержимое ``customer``:
                    * name (str): ФИО покупателя.
                    * email (str): Электронная почта покупателя.
                    * phone (str): Телефон покупателя.
                    * is_courier (bool): Нужна ли доставка или нет.
                    * address (str): Адрес доставки (если она нужна).
            tickets (dict): Словарь, содержащий словари с параметрами заказываемых билетов.

        Returns:
            list: Список словарей с информацией о билетах в заказе.
                Содержимое результата:
                    order_id (int): Идентификатор заказа в сервисе заказа билетов.
                    tickets (dict): Словарь, содержащий словари с информацией о заказанных билетах.
                        Содержимое словарей в **tickets**:
                            ticket_uuid (str): Уникальный UUID билета.
                            bar_code (str): Штрих-код билета (СуперБилет - **20 символов**, Радарио - **12 символов**).
        """
        pass

    @abstractmethod
    def order_cancel(self, **kwargs):
        """Отмена ранее созданного заказа.

        Args:
            event_id (int): Идентификатор события.
            order_uuid (str): Уникальный UUID заказа.
            order_id (int): Идентификатор заказа.
            tickets (dict): Словарь, содержащий словари с параметрами заказываемых билетов.

        Returns:
            dict: Информация об удалении заказа.

                Содержимое результата:
                    * success (bool): Успешный (``True``) или НЕуспешный (``False``) результат.
        """
        pass

    @abstractmethod
    def order_approve(self, **kwargs):
        """Отметка о подтверждении онлайн-оплаты созданного ранее заказа.

        Args:
            event_id (int): Идентификатор события.
            order_uuid (str): Уникальный UUID заказа.
            order_id (int): Идентификатор заказа (только Радарио).
            payment_id (int): Идентификатор оплаты.
            payment_datetime(datetime.datetime): Дата и время оплаты.
            tickets (dict): Словарь, содержащий словари с параметрами заказываемых билетов.

        Returns:
            dict: Информация об успешной или НЕуспешной оплате.

                Содержимое результата:
                    * **success** (bool): Успешный (``True``) или НЕуспешный (``False``) результат.
        """
        pass

    @abstractmethod
    def order_refund(self, **kwargs):
        """Возврат стоимости билетов (с удалением заказа и освобождением билетов для продажи).

        Args:
            order_id (int): Идентификатор заказа.
            payment_id (str): Идентификатор оплаты.
            amount (Decimal): Сумма возврата в рублях.
            reason (str): Причина возврата.

        Returns:
            dict: Информация об успешном или НЕуспешном возврате.
                Содержимое результата:
                    * success (bool): Успешный (``True``) или НЕуспешный (``False``) результат.
                    * amount (Decimal): Сумма возврата в рублях.
        """
        pass
