<?php
defined('_JEXEC') or die('Restricted access');

class AfishaControllerGettickets extends AfishaController {
    /** @param SBGS   $sbgs   –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ SBGS */
    private $sbgs = null;
    /** @param Order  $order  –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Order */
    private $order = null;
    /** @param Logger $logger –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Logger */
    private $logger = null;

    public function order() {
        global $mainframe;

        $config =& JFactory::getConfig();
        $db     =& JFactory::getDBO();

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö POST-–∑–∞–ø—Ä–æ—Å–∞ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ –∑–∞–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤
        $customer = $_POST['customer'];
        // –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–∞ –±—É–¥—É—â–µ–µ –≤ cookie `afishaCustomer`
        setcookie('afishaCustomer', serialize($customer), time() + 366*24*60*60, '/');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        $event_id   = (int)$_POST['event_id'];
        $order_tag  = JRequest::getVar('order_tag', null, 'COOKIE', 'STRING');
        $order_type = $customer['delivery'];

        $this->order = getOrder($event_id, $order_tag);
#$this->logger->write(array('OrderClassName1' => get_class(this->$order), 'OrderClass1' => $this->order));
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î, 
        // —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∏–≥–¥–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å 
        // –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        $this->order->update($this->order, 'New', $order_type);

        $this->order = getOrder($event_id, $order_tag);
#$this->logger->write(array('OrderClassName2' => get_class($this->order), 'OrderClass2' => $this->order));

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        $this->order->name  = substr($db->quote($customer['name']),1,-1);
        $this->order->email = substr($db->quote($customer['email']),1,-1);
        $this->order->phone = preg_replace('/[^\d]/', '', $customer['phone']);

        if ($this->order->type == 'Courier') {
            $this->order->address = $customer['address'];
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö –∏–∑ –ë–î
        $tickets = $this->order->extractOrderTickets($this->order->data);

        // –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞—á–∏–∫–µ
        $this->sbgs->SetCustomerInfo(
            array(
                'name'  => $this->order->name,
                'phone' => $this->order->phone,
                'email' => $this->order->email,
                #'has_delivery'     => ($this->order->type == 'Courier' ? 1 : 0),
                'has_delivery'     => $this->order->has_delivery,
                #'delivery_address' => ($this->order->type == 'Courier' ? $this->order->address : null),
                'delivery_address' => $this->order->address,
                'order_id' => $this->order->tag
            )
        );

        // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
        $reservation = $this->sbgs->SetReservation($tickets);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
        $this->checkTickets($reservation);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö (–≤–º–µ—Å—Ç–µ —Å `reservation_id`)
        $tickets = $this->sbgs->GetState($tickets);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞ –±–∏–ª–µ—Ç–æ–≤
        $___reservation_correct = true;
        foreach ($tickets as $ticket) {
            $this->order->reservation_id = $ticket['reservation_id'];

            if ( (int)$ticket['result'] != 0 ) {
                $___reservation_correct = false;
            }
        }

        $this->logger->write(
            array(
                'event_id' => $this->order->event_id,
                'tag' => $this->order->tag,
                'reservation_id' => $this->order->reservation_id,
                'tickets' => $tickets,
                'reservation_correct' => $___reservation_correct,
                'order' => $this->order
            )
        );

        if ($___reservation_correct === false) {
            $this->order->payment_info['error_code']    = '';
            $this->order->payment_info['error_message'] = 'reservation incorrect';
            $message = '<span id="error-message">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ –±–∏–ª–µ—Ç–æ–≤. <a href="' . $this->order->event_url . '">üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.</span>';
            // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ `reservation_id`
            $this->order->mark('Cancelled', $tickets, $this->order->final_url, $message);
        }

        // –£–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        $this->order->setOrderState();

        // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤
        $this->order->preOrder($tickets);

        $mainframe->close();
    }

    /**
     * –í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–ø–ª–∞—Ç—ã –°–ù–ì–ë
     */
    public function sngbInitProxy() {
        $this->logger->write(
            array(
                'init_proxy_input' => $_GET
            ), 'payment_sngb'
        );

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        $event_id  = $_GET['event_id'];
        $order_tag = isset($_GET['tag']) ? $_GET['tag'] : null;

        $this->order = getOrder($event_id, $order_tag);
        #$this->logger->write(array('OrderClassName' => get_class($this->order), 'OrderClass' => $this->order));

        // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
        if (isset($_GET['error'])) {
            $this->order->payment_info['error_code']    = $_GET['error'];
            $this->order->payment_info['error_message'] = $_GET['errortext'];

            $this->paymentError();
        // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏
        } else {
            #$this->order->event_id = $_GET['event_id'];
            #$this->order->event_info = $this->order->getEventInfo($this->order->event_id);
            $this->order->reservation_id = $_GET['trackid'];
            $this->order->payment_id = $_GET['paymentid'];
            // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –∫ integer, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ —Å—É—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (—É —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ä–∞–≤–Ω–æ '00')
            $this->order->payment_info['payment_code'] = is_numeric($_GET['responsecode']) ? (int)$_GET['responsecode'] : $_GET['responsecode'];
            $this->order->payment_info['payment_status'] = $_GET['result'];

            // –£–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
            if ($this->order->payment_info['payment_code'] == 0) {
                $this->logger->write(
                    array(
                        'init_proxy' => 'success',
                        'tag'        => $this->order->tag,
                        'payment_id' => $this->order->payment_id
                    ), 'payment_sngb'
                );

                $this->paymentSuccess();
            // –ù–ï—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
            } else {
                $this->logger->write(
                    array(
                        'init_proxy' => 'error',
                        'tag'        => $this->order->tag,
                        'payment_id' => $this->order->payment_id
                    ), 'payment_sngb'
                );

                $this->order->payment_info['error_code']    = $_GET['responsecode'];
                $this->order->payment_info['error_message'] = mb_strtoupper($_GET['result'], 'UTF-8');

                $this->paymentError();
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
     */
    public function paymentSuccess() {
        global $mainframe;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ
        if (!isset($this->order)) {
            $event_id  = $_GET['event_id'];
            $order_tag = isset($_GET['tag']) ? $_GET['tag'] : null;

            $this->order = getOrder($event_id, $order_tag);
        }

        $this->logger->write(array('success_order' => $this->order));

        #$this->order->event_info = $this->order->getEventInfo($this->order->event_id);
        #$this->order->setOrderURL();

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö
        $tickets = $this->sbgs->GetState($this->order->extractOrderTickets($this->order->data));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `reservation_id`
            // –î–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∑–µ—Ä–≤–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω—ã –≤ CRON-–º–µ—Ç–æ–¥–µ `checkup`, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö.
            // –ï—Å–ª–∏ –±–∏–ª–µ—Ç—ã —Å–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ `SOL` –ø—Ä–∏ —Ç–æ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–µ—Å—Å–∏—é –∏ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏ - –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–∫—É–ø–ª–µ–Ω—ã –≤ –∫–∞—Å—Å–µ.
        $_reservation_timed_out = $this->checkReservationId($tickets, $this->order->reservation_id);
        if ($_reservation_timed_out === false) {
            $this->order->payment_info['error_code']    = '';
            $this->order->payment_info['error_message'] = 'reservation ' . $this->order->reservation_id . ' timed out';
            $message = '<span id="error-message">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ –±–∏–ª–µ—Ç–æ–≤. <a href="' . $this->order->event_url . '">üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.</span>';
            // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ `reservation_id` - –±—Ä–æ–Ω—å –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É
            $this->order->mark('Cancelled', $tickets, $this->order->final_url, $message);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
        $this->checkTickets($tickets, true);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        $config =& JFactory::getConfig();
        $payment = getPayment('superbilet', $config->getValue('commission_included'));
        $payment_status = $payment->status($this->order->payment_id);

        switch ($payment_status['result']) {
            case 'success':
                $message = '<span id="success-message">–ó–∞–∫–∞–∑ ‚Ññ ' . $this->order->reservation_id . ' —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –Ω–æ–º–µ—Ä –æ–ø–ª–∞—Ç—ã ' . $this->order->payment_id . '. –ù–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –í–∞–º–∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –í–∞–º–∏ –±–∏–ª–µ—Ç–∞—Ö.</span>';
                // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
                $this->order->mark('Paid', $tickets, $this->order->final_url, $message);
                break;
            
            case 'error':
                $this->order->payment_info['error_code']    = $payment_status['error_code'];
                $this->order->payment_info['error_message'] = $payment_status['error_message'];
                $error_text = '';
                if (isset($this->order->payment_info['error_code'])) {
                    $error_text .= ' ' . $this->order->payment_info['error_code'];
                }
                if (isset($this->order->payment_info['error_message'])) {
                    $error_text .= ': ' . $this->order->payment_info['error_message'];
                }
                $message = '<span id="error-message">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞' . $error_text . ' <a href="' . $this->order->event_url . '">üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.</span>';
                // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                $this->order->mark('Cancelled', $tickets, $this->order->final_url, $message);
                break;
        }

        $mainframe->close();
    }

    /**
     * –í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–ø–ª–∞—Ç—ã –°–ù–ì–ë
     */
    public function sngbErrorProxy() {

        $this->logger->write(
            array(
                'error_proxy' => $_GET
            ), 'payment_sngb'
        );

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        $event_id  = $_GET['event_id'];
        $order_tag = isset($_GET['tag']) ? $_GET['tag'] : null;

        $this->order = getOrder($event_id, $order_tag);
        #$this->logger->write(array('OrderClassName' => get_class($this->order), 'OrderClass' => $this->order));

        $this->order->event_id = $_GET['event_id'];
        $this->order->tag = $_GET['tag'];
        $this->order->reservation_id = $_GET['trackid'];
        $this->order->payment_id = $_GET['paymentid'];
        $this->order->payment_info['payment_code'] = $_GET['responsecode'];
        $this->order->payment_info['payment_status'] = $_GET['result'];
        $this->order->payment_info['error_code'] = $_GET['error'];
        $this->order->payment_info['error_message'] = $_GET['errortext'];

        $this->paymentError();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–ï—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã (–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
     */
    public function paymentError() {
        global $mainframe;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ
        if (!isset($this->order)) {
            $event_id = $_GET['event_id'];
            $order_tag = isset($_GET['tag']) ? $_GET['tag'] : null;

            $this->order = getOrder($event_id, $order_tag);
        }

        $this->logger->write(array('error_order' => $this->order));

        #$this->order->event_info = $this->order->getEventInfo($this->order->event_id);
        #$this->order->setOrderURL();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
        $tickets = $this->sbgs->GetState($this->order->extractOrderTickets($this->order->data));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        $config =& JFactory::getConfig();
        $payment = getPayment('superbilet', $config->getValue('commission_included'));
        $payment_status = $payment->status($this->order->payment_id);

        $this->order->payment_info['error_code']    = $payment_status['error_code'];
        $this->order->payment_info['error_message'] = $payment_status['error_message'];
        $error_text = '';
        if (isset($this->order->payment_info['error_code'])) {
            $error_text .= ' ' . $this->order->payment_info['error_code'];
        }
        if (isset($this->order->payment_info['error_message'])) {
            $error_text .= ': ' . $this->order->payment_info['error_message'];
        }
        $message = '<span id="error-message">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞' . $error_text . ' <a href="' . $this->order->event_url . '">üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.</span>';
        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        $this->order->mark('Cancelled', $tickets, $this->order->final_url, $message);

        $mainframe->close();
    }

    /**
     * CRON-–∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ `AwaitingPayment` (–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã),
     * —Ö–æ—Ç—è –∑–∞–∫–∞–∑ —É–∂–µ –º.–±. —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω —Å –æ—à–∏–±–∫–æ–π.
     */
    public function checkup() {

        $this->order->checkup = true;

        $config =& JFactory::getConfig();
        $payment = getPayment('superbilet', $config->getValue('commission_included'));

        // –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        $timeout = $payment->timeout() + 2;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `AwaitingPayment`
        $db =& JFactory::getDBO();
        $query = "SELECT * FROM `#__sb_orders` WHERE `state` = 'AwaitingPayment'";
        $db->setQuery($query);
        $awaiting_payment = $db->loadAssocList();

        // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        $now = strtotime(date('Y-m-d H:i:s'));

        foreach ($awaiting_payment as $ap) {
            // –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
            $dt = strtotime($ap['dt']);
            // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–∫–∞–∑–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
            $diff = round(abs($now - $dt) / 60);

            $this->logger->write(array('current_awaiting_payment' => $ap), 'tickets_superbilet_checkup');
            // 'now' => $now, 'dt' => $dt, 'diff' => $now

            // –ï—Å–ª–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            if ((int)$diff > $timeout) {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                $this->order = getOrder($ap['event_id'], $ap['tag']);

                $tickets = $this->order->data;
                $pattern = "/^(\d+)-(\d+)-(\d+)-(\d+)$/";
                $this->order->chosen_tickets = array_intersect_key($tickets, array_flip(preg_grep($pattern, array_keys($tickets))));
                foreach ($this->order->chosen_tickets as $tid => &$ticket) {
                    $ticket['price'] = floor($ticket['price']) != $ticket['price'] ? round($ticket['price'], 2) : round($ticket['price'], 0);
                }
                unset($ticket);

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö
                $tickets = $this->sbgs->GetState($this->order->extractOrderTickets($this->order->data));
                $this->logger->write(array('current_awaiting_payment_GetState' => $tickets), 'tickets_superbilet_checkup');

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `reservation_id`
                $reservation_correct = $this->checkReservationId($tickets, $this->order->reservation_id);
                if ($reservation_correct === true) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                    $ap_status = $payment->status($ap['payment_id']);
                    $this->logger->write(array('current_awaiting_payment_status' => $ap_status), 'tickets_superbilet_checkup');

                    switch ($ap_status['result']) {
                        // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                        case 'success':
                            // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
                            $this->order->mark('Paid', $tickets);
                            break;
                        // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ù–ï—É—Å–ø–µ—à–Ω–æ
                        case 'error':
                            $this->order->payment_info['error_code']    = $ap_status['error_code'];
                            $this->order->payment_info['error_message'] = $ap_status['error_message'];
                            // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                            $this->order->mark('Cancelled', $tickets);
                            break;
                    }
                } else {
                    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ `reservation_id` - –±—Ä–æ–Ω—å –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                    $this->order->payment_info['error_code']    = '';
                    $this->order->payment_info['error_message'] = 'reservation id incorrect';
                    $this->order->mark('Cancelled', $tickets);
                }

            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–ø—É—Å—Ç—è —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
        $this->cleanup();

        $this->order->checkup = false;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–∏–∫–∞–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ `New`) —Å–ø—É—Å—Ç—è –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
     * 
     * @param string $interval –í—Ä–µ–º–µ–Ω–Ω–æ–π MySQL-–∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—É—Ç–∫–∏)
     * 
     */
    private function cleanup($interval = '1 DAY') {
        $db =& JFactory::getDBO();

        // $query  = "SELECT * FROM `#__sb_orders` ";
        $query  = "DELETE FROM `#__sb_orders` ";
        $query .= "WHERE `state` = 'New' ";
        $query .= "AND (`dt` IS NULL OR `dt` <= NOW() - INTERVAL " . $interval . ")";

        $db->setQuery($query);
        $db->query();

        $affected_rows = $db->getAffectedRows();
        if ((int)$affected_rows !== 0) {
            $this->logger->write(array('unfinished_orders_deleted' => $affected_rows), 'tickets_superbilet_checkup');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `reservation_id`
     * 
     * @param array $tickets –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
     * 
     * @return boolean –°–æ—Å—Ç–æ—è–Ω–∏–µ `reservation_id` - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (true) –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (false)
     * 
     */
    private function checkReservationId($tickets, $reservation_id) {
        $logger = new Logger();
        $log = array();

        $result = true;
        foreach ($tickets as $ticket) {
            $log['checkReservationId_ticket'] = $ticket;
            $log['checkReservationId_reservation_id'] = $reservation_id;
            if (!isset($ticket['reservation_id']) || $ticket['reservation_id'] != $reservation_id) {
                $result = false;
                break; // –ú–æ–∂–Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –í–°–ï–ú –±–∏–ª–µ—Ç–∞–º - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ
            }
        }

        $log['checkReservationId_result'] = $result;

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–∞ –∏–ª–∏ –≤ –ª–æ–≥ –¥–ª—è –º–µ—Ç–æ–¥–∞ `checkup`
        if ($this->order->checkup === true) {
            $logger->write($log, 'tickets_superbilet_checkup');
        } else {
            $logger->write($log);
        }

        return $result;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ (–ø–æ—Å–ª–µ SetReservation –≤ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ—Å–ª–µ GetState –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã)
     * 
     * @param array   $tickets –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
     * @param boolean $eticket –ù—É–∂–Ω–æ –ª–∏ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
     * 
     */
    private function checkTickets($tickets, $eticket = false) {
        $logger = new Logger();

        $config =& JFactory::getConfig();

        $sbgs = GetSBGS(
            $config->getValue('SBGS_host'),
            $config->getValue('SBGS_user'),
            $config->getValue('SBGS_pass'),
            $config->getValue('SBGS_mode')
        );

        $events = $sbgs->GetEvents(); // TODO: –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—É—é —Å—Ö–µ–º—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è show –∏ event
        $venues = $sbgs->GetVenues();
        $stages  = array();
        $sectors = array();
        $error_tickets      = array();
        $successful_tickets = array();
        $count_chosen = 0;
        $total = 0.0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –±–∏–ª–µ—Ç–æ–≤
        foreach ($tickets as $tid => $ticket) {
            if (!isset($sectors[$ticket['event_id']])) {
                $sectors[$ticket['event_id']] = $sbgs->GetSectors($ticket['event_id']);
            }
            if (!isset($stages[$events[$ticket['event_id']]['venue_id']])) {
                $stages[$events[$ticket['event_id']]['venue_id']] = $sbgs->GetStages($events[$ticket['event_id']]['venue_id']);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
            if (isset($ticket['result_id']) && (int)$ticket['result_id'] != 0) {
                $logger->write(array('error_ticket' => $ticket, 'error_ticket_result_id' => $ticket['result_id']));

                $et = array();
                $et['sector_name'] = mb_strtolower($sectors[$ticket['event_id']][$ticket['sector_id']]['name'], 'UTF-8');
                $et['row']    = $ticket['row'];
                $et['seat']   = $ticket['seat'];
                $error_tickets[] = $et;

                unset($this->order->data[$tid]);

                continue;
            }

            $logger->write(array('successful_ticket' => $ticket));
            // –ü–µ—Ä–µ–±–æ—Ä —É–¥–∞—á–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
            $st = array();
            $st['event_id']  = $ticket['event_id'];
            $st['sector_id'] = $ticket['sector_id'];
            $st['sector_name'] = mb_strtolower($sectors[$ticket['event_id']][$ticket['sector_id']]['name'], 'UTF-8');
            $st['row']    = $ticket['row'];
            $st['seat']   = $ticket['seat'];
            $st['price']  = floor($ticket['price']) != $ticket['price'] ? round($ticket['price'], 2) : round($ticket['price'], 0);
            if ($eticket === true) {
                $st['number']  = $this->getSerial(10);
                $st['barcode'] = $this->getSerial(12);
            }
            $successful_tickets[$tid] = $st;
            $count_chosen += 1;
            $total += $st['price'];
        }

        $this->order->chosen_tickets = $successful_tickets;
        $this->order->count_chosen   = $count_chosen;
        $this->order->total          = $total;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä (–¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞)
     * 
     * @param integer $ceil –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 12 –¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞)
     * 
     * @return string –ß–∏—Å–ª–æ
     */
    private function getSerial($ceil = 12) {
        $number = '';
        for ($i = 1; $i < $ceil; $i++) {
            // –ü–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–µ –±—É–¥—É—Ç —Ä–∞–≤–Ω—ã –Ω—É–ª—é
            if ($i == 1 || $i == $ceil) {
                $number .= mt_rand(1, 9);
            } else {
                $number .= mt_rand(0, 9);
            }
        }
        return $number;
    }

}
