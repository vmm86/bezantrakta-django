.. _ticket_service:

#############################
Сервисы продажи билетов (СПБ)
#############################

**********
Список СПБ
**********

Фильтры
=======

* фильтр по сайтам, к которым привязаны СПБ

Действия
========

* добавить новый СПБ

Действия с выбранными СПБ
=========================

* удалить
* включить или отключить
* пересоздать кэш

Столбцы в таблице СПБ
=====================

* **Название**
* **Идентификатор**
* **Работает** - включен ли СПБ или отключен.
* **Оплата** - привязан ли к этому СПБ сервис онлайн-оплаты (СОО).
* **Схем залов** - количество схем залов, привязанных к этому СПБ.

***************************
Страница редактирования СПБ
***************************

Атрибуты СПБ
============

* **Название**

  Рекомендуется соблюдать единообразие в названиях СПБ - ``СПБ (сайт)``, например, ``СуперБилет (Воронеж: ТОБ)`` и ``Радарио (Камерный театр)``.

* **Идентификатор** в латиннице.

  Рекомендуется соблюдать единообразие в идентификаторах СПБ - ``СПБ-сайт``, например, ``superbilet-theatre-vrn-tob`` или ``radario-chambervrn``. Если это shared-СПБ, в конце добавляется псевдоним сайта, к которому он подключен в конкретном случае, например, ``superbilet-agency-vrn-arh``.

* **Сервис продажи билетов** - выбор типа СПБ из имеющихся вариантов:

  * **СуперБилет**
  * **Радарио**

* **Работает** - включен ли СПБ или отключен.

  Из отключенных СПБ не испортируется информация в базу данных.

* **Сайт**, к которому привязан СПБ.

* **Сервис онлайн-оплаты** - привязка СОО к СПБ (если это необходимо).

Для подклчения онлайн-оплаты к какому-то СПБ на каком-то сайте, нужно:

1. Создать новую учётную запись СОО в разделе :ref:`Сервисы онлайн-оплаты <payment_service>`,
2. Подключить тот или иной СОО к тому или иному СПБ в этом разделе (к одному СПБ можно подключать один СОО).

Если онлайн-оплата в каком-то СПБ не требуется - это поле остаётся пустым.

Настройки СПБ в JSON
--------------------

* ``init`` { словарь 'ключ': 'значение' } - параметры для подключения (зависят от конкретного СПБ).

  * Параметры для **СуперБилет**:

    * ``host`` строка - URL для отправки запросов к API.
    * ``user`` строка - имя пользователя.
    * ``pswd`` строка - пароль пользователя.
    * ``mode`` строка - режим работы (``agency`` - Агентство, ``theatre`` - Театр).

  * Параметры для **Радарио**:

    * ``api_id`` число - идентификатор доступа к API.
    * ``api_key`` строка - ключ доступа к API.
    * ``city_id`` число - идентификатор города в БД Радарио, в котором находится организатор.
    * ``company_id`` число - идентификатор организатора в БД Радарио.
    * ``company_title`` строка - название организатора в БД Радарио.

* ``schemes`` [ список чисел ] - список идентификаторов схем залов в сервисе продажи билетов. При импорте информации из сервиса продажи билетов:

  * **Если список НЕпустой** - будут импортироваться *только те залы, идентификаторы которых указаны в этом списке*.
  * **Если список пустой** - будут импортироваться *ВСЕ залы*.

* ``order`` { словарь 'ключ': 'значение' } - включение/выключение способов заказа билетов на сайте (``true`` - включено, ``false`` - отключено):

  * ``self_cash`` логическое значение - получение в кассе (оффлайн-оплата).
  * ``courier_cash`` логическое значение - доставка курьером (оффлайн-оплата).
  * ``self_online`` логическое значение - получение в кассе (онлайн-оплата).
  * ``email_online`` логическое значение - электронный билет на email (онлайн-оплата).

* ``order_description`` { словарь 'ключ': 'значение' } - сопроводительный текст к способам заказа билетов - на шаге 2 заказа билетов и в email-уведомлении покупателю (строка, возможно с HTML-кодом):

  * ``self_cash`` строка - получение в кассе (оффлайн-оплата).
  * ``courier_cash`` строка - доставка курьером (оффлайн-оплата).
  * ``self_online`` строка - получение в кассе (онлайн-оплата).
  * ``email_online`` строка - электронный билет на email (онлайн-оплата).

* ``order_email`` { словарь 'ключ': 'значение' } - электронная почта для отправки сообщений администратору и покупателю:

  * ``user`` строка - логин (например, zakaz@bezantrakta.ru),
  * ``pswd`` строка - пароль.

* ``order_email_description`` { словарь 'ключ': 'значение' } - сопроводительный текст к способам заказа билетов в email-сообщении покупателю (строка с HTML-кодом):

  * ``self_cash`` строка - получение в кассе (оффлайн-оплата).
  * ``courier_cash`` строка - доставка курьером (оффлайн-оплата).
  * ``self_online`` строка - получение в кассе (онлайн-оплата),
  * ``email_online`` строка - электронный билет на email (онлайн-оплата).

* ``max_seats_per_order`` число - максимальное число билетов в заказе (по умолчанию - ``7``).
* ``courier_price`` число - стоимость доставки курьером в рублях (если ``0`` - доставка бесплатная).
* ``promoter`` строка - организатор мероприятий (промоутер) по умолчанию для всех событий в этом сервисе продажи билетов (подставляется в событии, если это поле в нём пустое).
* ``seller строка`` - продавец билетов (агент) по умолчанию для всех событий в этом сервисе продажи билетов.
* ``heartbeat_timeout`` число - время в секундах, по истечении которого вновь запрашивается список доступных к продаже мест на схеме зала (по умолчанию - ``10``).
* ``seat_timeout число`` - время в минутах, по истечении которого автоматически снимается предварительный резерв мест на схеме зала (по умолчанию - ``15``).
* ``hide_sold_non_fixed_seats`` логическое значение - возможность скрывать на схеме зала проданные места в секторах без фиксированной рассадки, которые обозначаются как маркированные списки ``ul`` с классом ``non_fixed_seats`` (по умолчанию - ``false``).

Схемы залов
-----------
В таблице выводятся все имеющиеся :ref:`схемы залов <ticket_service_scheme>`, импортированные из конкретного СПБ с их атрибутами:

* **Название схемы зала**

* **ID схемы зала**

* **Зал** (место проведения событий), к которому нужно привязать схему зала, чтобы при следующем запуске задания на импорт в базу данных сайта импортировались привязанные к ней события.

.. only:: dev

  ******
  Модели
  ******

  .. autoclass:: third_party.ticket_service.models.ticket_service_scheme_venue_binder.TicketServiceSchemeVenueBinder
