import logging
import uuid
from mail_templated import EmailMessage

from django.conf import settings
from django.core.mail.backends.smtp import EmailBackend
from django.db.models import F
from django.shortcuts import redirect

from project.cache import cache_factory
from project.shortcuts import message, render_messages, timezone_now

from bezantrakta.order.models import Order, OrderTicket
from bezantrakta.order.settings import ORDER_DELIVERY, ORDER_PAYMENT, ORDER_STATUS
from bezantrakta.eticket.shortcuts import render_eticket


def payment_success(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã."""
    logger = logging.getLogger('bezantrakta.order')

    event_uuid = uuid.UUID(request.GET.get('event_uuid'))
    order_uuid = uuid.UUID(request.GET.get('order_uuid'))

    now = timezone_now()
    logger.info('\n----------–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ {order_uuid}----------'.format(order_uuid=order_uuid))
    logger.info('{:%Y-%m-%d %H:%M:%S}'.format(now))

    event = cache_factory('event', event_uuid)
    if event is None:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        msgs = [
            message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üòû'),
            message('info', 'üëâ <a href="/">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a>.'),
        ]
        render_messages(request, msgs)
        return redirect('error')
    event['id'] = event['ticket_service_event']
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ñ–∏—à–∏ –ª–∏–±–æ –∑–∞–≥–ª—É—à–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info('–°–æ–±—ã—Ç–∏–µ')
    logger.info(event)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
    try:
        order = dict(Order.objects.annotate(
            event_uuid=F('event'),
            event_id=F('ticket_service_event'),
            order_id=F('ticket_service_order'),
        ).values(
            'event_uuid',
            'event_id',
            'order_id',
            'ticket_service_id',
            'name',
            'email',
            'phone',
            'delivery',
            'payment',
            'payment_id',
            'status',
            'tickets_count',
            'total'
        ).get(
            id=order_uuid,
        ))
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
        try:
            order['tickets'] = list(OrderTicket.objects.annotate(
                ticket_id=F('id'),
            ).values(
                'ticket_id',
                'ticket_service_order',
                'bar_code',
                'sector_id',
                'sector_title',
                'row_id',
                'seat_id',
                'seat_title',
                'price_group_id',
                'price'
            ).filter(
                order_id=order_uuid
            ))
        except OrderTicket.DoesNotExist:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–∫–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ - –±—Ä–æ–Ω—å –Ω–∞ –±–∏–ª–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–∞. üòû'),
                message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                        event_url=event['url'])
                        ),
            ]
            render_messages(request, msgs)
            return redirect('error')
    except Order.DoesNotExist:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        msgs = [
            message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑ –µ—â—ë –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. üòû'),
            message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                    event_url=event['url'])
                    ),
        ]
        render_messages(request, msgs)
        return redirect('error')
    else:
        logger.info('\n–ó–∞–∫–∞–∑')
        logger.info(order)
        logger.info('\n–ë–∏–ª–µ—Ç—ã –≤ –∑–∞–∫–∞–∑–µ')
        logger.info(order['tickets'])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∞–π—Ç–∞
        domain = {}
        domain['id'] = request.domain_id
        domain['title'] = request.domain_title
        domain['slug'] = request.domain_slug
        domain['url'] = request.url_domain
        domain['settings'] = request.domain_settings

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customer = {}
        customer['delivery'] = order['delivery']
        customer['payment'] = order['payment']
        customer['name'] = order['name']
        customer['email'] = order['email']
        customer['phone'] = order['phone']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
        ticket_service = cache_factory('ticket_service', event['ticket_service_id'])
        # –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
        ts = ticket_service['instance']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
        payment_service = cache_factory('payment_service', event['payment_service_id'])
        # –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
        ps = payment_service['instance']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        payment_status = ps.payment_status(payment_id=order['payment_id'])

        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if payment_status['success']:
            logger.info('\n–û–ø–ª–∞—Ç–∞ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ'.format(payment_id=order['payment_id']))

            payment_datetime = timezone_now()

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
            order_payment = ts.order_payment(
                event_id=event['id'],
                order_uuid=order_uuid,
                order_id=order['order_id'],
                payment_id=order['payment_id'],
                payment_datetime=payment_datetime,
                tickets=order['tickets'],
            )
            if order_payment['success']:
                logger.info('–ó–∞–∫–∞–∑ {order_id} –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'.format(
                    order_id=order['order_id']
                    )
                )
            else:
                logger.info('–ó–∞–∫–∞–∑ {order_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'.format(
                    order_id=order['order_id']
                    )
                )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ –ë–î
            order['status'] = 'approved'
            logger.info('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}\n'.format(
                status=ORDER_STATUS[order['status']]['description'])
            )

            Order.objects.filter(id=order_uuid).update(status=order['status'])

            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            customer['delivery_description'] = ORDER_DELIVERY[customer['delivery']]
            customer['payment_description'] = ORDER_PAYMENT[customer['payment']]
            customer['status_color'] = ORDER_STATUS[order['status']]['color']
            customer['status_description'] = ORDER_STATUS[order['status']]['description']

            # –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            from_email = {}
            from_email['user'] = ticket_service['settings']['order_email']['user']
            from_email['pswd'] = ticket_service['settings']['order_email']['pswd']
            from_email['connection'] = EmailBackend(
                host=settings.EMAIL_HOST,
                port=settings.EMAIL_PORT,
                username=from_email['user'],
                password=from_email['pswd'],
                use_tls=settings.EMAIL_USE_TLS,
            )

            email_context = {
                'domain': domain,
                'event': event,
                'ticket_service': ticket_service,
                'payment_service': payment_service,
                'order': order,
                'customer': customer
            }

            admin_email = EmailMessage(
                'order/email_admin.tpl',
                email_context,
                from_email['user'],
                (from_email['user'],),
                connection=from_email['connection']
            )
            customer_email = EmailMessage(
                'order/email_customer.tpl',
                email_context,
                from_email['user'],
                (customer['email'],),
                connection=from_email['connection']
            )

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∏ –∏—Ö –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–∏—Å—å–º–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            if customer['delivery'] == 'email':
                for t in order['tickets']:
                    t.update(event)
                    # logger.info('\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–ª–µ—Ç–∞')
                    # logger.info(t)
                    pdf_ticket_file = render_eticket(t)
                    customer_email.attach_file(pdf_ticket_file, mimetype='application/pdf')

            admin_email.send()
            logger.info('Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            customer_email.send()
            logger.info('Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

            return redirect('order:confirmation', order_uuid=order_uuid)
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ù–ï—É—Å–ø–µ—à–Ω–æ
        else:
            logger.info('\n–û–ø–ª–∞—Ç–∞ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ù–ï—É—Å–ø–µ—à–Ω–æ'.format(payment_id=order['payment_id']))

            # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
            ts.order_delete(
                event_id=event['id'],
                order_uuid=order_uuid,
                order_id=order['order_id'],
                tickets=order['tickets'],
            )

            # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
            order['status'] = 'cancelled'
            logger.info('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}'.format(
                status=ORDER_STATUS[order['status']]['description'])
            )

            Order.objects.filter(id=order['uuid']).update(status=order['status'])

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. üòû'),
                message('error', '{code} {message}'.format(
                        code=payment_status['code'],
                        message=payment_status['message'])
                        ),
                message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                        event_url=event['url'])
                        ),
            ]
            render_messages(request, msgs)
            return redirect('error')
