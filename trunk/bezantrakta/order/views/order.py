import logging
import simplejson as json
import uuid
from mail_templated import EmailMessage
from random import randint

from django.conf import settings
from django.core.mail.backends.smtp import EmailBackend
from django.db.utils import IntegrityError
from django.shortcuts import redirect

from project.cache import cache_factory
from project.shortcuts import message, render_messages, timezone_now

from ..models import Order, OrderTicket
from ..settings import ORDER_DELIVERY, ORDER_PAYMENT, ORDER_STATUS, ORDER_TYPE


def order(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

    –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏, —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –∏ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã, –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ, –∑–∞–∫–∞–∑–µ.

    –ó–∞–∫–∞–∑—ã —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –∂–µ –º–µ—Ç–æ–¥–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.

    –ó–∞–∫–∞–∑—ã —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Ñ–æ—Ä–º—É (URL –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã).
    –û–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –≤ –≤–∏–¥–∞—Ö ``payment_service.payment_success`` –∏–ª–∏ ``payment_service.payment_error`` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã.
    """
    logger = logging.getLogger('bezantrakta.order')

    if request.method == 'POST':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∞–π—Ç–∞
        domain = cache_factory('domain', request.domain_slug)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–±—ã—Ç–∏—è
        event_uuid = uuid.UUID(request.COOKIES.get('bezantrakta_event_uuid', None))
        event = cache_factory('event', event_uuid)
        if event is None:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üôÅ'),
                message('info', 'üëâ <a href="/">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a>.'),
            ]
            render_messages(request, msgs)
            return redirect('error')
        event['id'] = event['ticket_service_event']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
        ticket_service = cache_factory('ticket_service', event['ticket_service_id'])
        # –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
        ts = ticket_service['instance']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
        payment_service = cache_factory(
            'payment_service', event['payment_service_id'],
            domain_slug=domain['domain_slug']
        )
        # –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º URL –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞—á–Ω–æ–π –∏–ª–∏ –ù–ï—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
        ps = payment_service['instance']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customer = {}
        customer['order_type'] = request.POST.get('customer_order_type')
        customer['delivery'] = request.POST.get('customer_delivery')
        customer['payment'] = request.POST.get('customer_payment')
        customer['name'] = request.POST.get('customer_name')
        customer['email'] = request.POST.get('customer_email')
        customer['phone'] = request.POST.get('customer_phone')
        customer['is_courier'] = True if customer['delivery'] == 'courier' else False
        customer['address'] = request.POST.get('customer_address') if customer['delivery'] == 'courier' else None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
        order = {}
        try:
            order['order_uuid'] = uuid.UUID(request.COOKIES.get('bezantrakta_order_uuid', None))
        except (AttributeError, TypeError, ValueError) as e:
            logger.critical('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!')
            logger.critical(e)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞! üôÅ'),
                message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                        event_url=event['url'])
                        ),
            ]
            render_messages(request, msgs)
            return redirect('error')
        else:
            order['tickets'] = json.loads(request.COOKIES.get('bezantrakta_order_tickets', []))
            order['count'] = int(request.COOKIES.get('bezantrakta_order_count', 0))
            order['total'] = ps.decimal_price(request.COOKIES.get('bezantrakta_order_total', 0))

            # –¢–∏–ø—ã –∑–∞–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤
            order['type'] = customer['order_type']

            # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞
            order['extra'] = event['settings']['extra'][order['type']]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—Ü–µ–Ω–æ–∫/—Å–∫–∏–¥–æ–∫

            # –î–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ - —Å —É—á—ë—Ç–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω)
            order['overall'] = ps.total_plus_extra(order['tickets'], order['total'], order['extra'])

            # –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∫—É—Ä—å–µ—Ä–æ–º - —Å —É—á—ë—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º (–µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞)
            if customer['delivery'] == 'courier':
                # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
                order['courier_price'] = ps.decimal_price(ticket_service['settings']['courier_price'])
                # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (—Å —É—á—ë—Ç–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º)
                order['overall'] = (
                    ps.total_plus_courier_price(order['overall'], order['courier_price']) if
                    order['extra'] > 0 else
                    ps.total_plus_courier_price(order['total'], order['courier_price'])
                )

            # –ü—Ä–∏ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–µ - —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞)
            if customer['payment'] == 'online':
                # –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
                order['commission'] = ps.decimal_price(payment_service['settings']['init']['commission'])
                # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (—Å —É—á—ë—Ç–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã)
                order['overall'] = (
                    ps.total_plus_commission(order['overall']) if
                    order['extra'] > 0 else
                    ps.total_plus_commission(order['total'])
                )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
            now = timezone_now()
            logger.info('\n----------–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {order_uuid}----------'.format(order_uuid=order['order_uuid']))
            logger.info('{:%Y-%m-%d %H:%M:%S}'.format(now))

            logger.info('–°–∞–π—Ç: {title} ({id})'.format(title=domain['domain_title'], id=domain['domain_id']))
            logger.info('–°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤: {title} ({id})'.format(
                    title=ticket_service['title'],
                    id=ticket_service['id']
                )
            )

            logger.info('UUID —Å–æ–±—ã—Ç–∏—è: {event_uuid}'.format(event_uuid=event['event_uuid']))
            logger.info('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è: {event_id}'.format(event_id=event['id']))

            logger.info('\n–°–æ–±—ã—Ç–∏–µ')
            logger.info(event)

            logger.info('\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
            logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤: {delivery}'.format(delivery=ORDER_DELIVERY[customer['delivery']]))
            if customer['delivery'] == 'courier':
                logger.info('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}'.format(address=customer['address']))
            logger.info('–û–ø–ª–∞—Ç–∞: {payment}'.format(payment=ORDER_PAYMENT[customer['payment']]))
            logger.info('–§–ò–û: {name}'.format(name=customer['name']))
            logger.info('Email: {email}'.format(email=customer['email']))
            logger.info('–¢–µ–ª–µ—Ñ–æ–Ω: {phone}'.format(phone=customer['phone']))

            logger.info('\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞')
            logger.info('UUID –∑–∞–∫–∞–∑–∞: {order_uuid}'.format(order_uuid=order['order_uuid']))
            logger.info('–ë–∏–ª–µ—Ç—ã –≤ –∑–∞–∫–∞–∑–µ:')
            for ticket in order['tickets']:
                logger.info('* {ticket}'.format(ticket=ticket))
            logger.info('–ß–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤: {count}'.format(count=order['count']))
            logger.info('–°—É–º–º–∞ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã: {total}'.format(total=order['total']))
            logger.info('–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}'.format(total=order['overall']))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑–µ—Ä–≤–µ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω)
            logger.info('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑–µ—Ä–≤–µ...')
            for ticket in order['tickets']:
                ticket['event_id'] = event['id']
                ticket_status = ts.ticket_status(**ticket)

                if not ticket_status['success']:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    msgs = [
                        message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ –±–∏–ª–µ—Ç–æ–≤. üôÅ'),
                        message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                                event_url=event['url'])
                                ),
                    ]
                    render_messages(request, msgs)
                    return redirect('error')

                ticket['status'] = ticket_status['status']
                logger.info('üé´ {ticket_status}'.format(ticket_status=str(ticket_status)))
            order['tickets'][:] = [t for t in order['tickets'] if t.get('status') in ('reserved', 'bypass',)]

            if len(order['tickets']) == 0:
                logger.error('–†–µ–∑–µ—Ä–≤ –Ω–∞ –≤—Å–µ –º–µ—Å—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ –∏—Å—Ç—ë–∫!')

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msgs = [
                    message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –≤—Å–µ –º–µ—Å—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ –∏—Å—Ç—ë–∫. üôÅ'),
                    message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                            event_url=event['url'])
                            ),
                ]
                render_messages(request, msgs)
                return redirect('error')

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∏–ª–µ—Ç–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∑–µ—Ä–≤–µ
            logger.info('\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...')
            order_create = ts.order_create(
                event_id=event['id'],
                order_uuid=order['order_uuid'],
                customer=customer,
                tickets=order['tickets']
            )
            logger.info('order[tickets]: {}'.format(order['tickets']))
            logger.info('order_create: {}'.format(order_create))

            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
            if order_create['success']:
                order['status'] = 'ordered'
                logger.info('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}'.format(
                    status=ORDER_STATUS[order['status']]['description'])
                )
                order['order_id'] = order_create['order_id']
                logger.info('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞: {order_id}'.format(order_id=order['order_id']))

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω - –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                for o in order_create['tickets']:
                    for t in order['tickets']:
                        if uuid.UUID(o['ticket_uuid']) == uuid.UUID(t['ticket_uuid']):
                            if settings.DEBUG:
                                logger.info('\n{o_uuid} == {t_uuid}: {cond}'.format(
                                    o_uuid=uuid.UUID(o['ticket_uuid']),
                                    t_uuid=uuid.UUID(t['ticket_uuid']),
                                    cond=uuid.UUID(o['ticket_uuid']) == uuid.UUID(t['ticket_uuid']))
                                )
                            t['bar_code'] = (
                                o['bar_code'] if
                                'bar_code' in o and o['bar_code'] is not None else
                                ''.join([str(randint(0, 9)) for x in range(ts.bar_code_length)])
                            )
                            logger.info('t[bar_code]: {barcode}'.format(barcode=t['bar_code']))
                        else:
                            continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω)
                logger.info('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ')
                for ticket in order['tickets']:
                    ticket_status = ts.ticket_status(**ticket)
                    ticket['status'] = ticket_status['status']
                    logger.info('* {ticket_status}'.format(ticket_status=str(ticket_status)))
                order['tickets'][:] = [t for t in order['tickets'] if t.get('status') in ('ordered', 'bypass',)]

                now = timezone_now()
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                try:
                    Order.objects.create(
                        id=order['order_uuid'],
                        ticket_service_id=ticket_service['id'],
                        ticket_service_order=order['order_id'],
                        event_id=event['event_uuid'],
                        ticket_service_event=event['id'],
                        datetime=now,
                        name=customer['name'],
                        email=customer['email'],
                        phone=customer['phone'],
                        address=customer['address'],
                        delivery=customer['delivery'],
                        payment=customer['payment'],
                        payment_id=None,
                        status=order['status'],
                        tickets_count=order['count'],
                        total=order['overall'],
                        domain_id=domain['domain_id']
                    )
                except IntegrityError:
                    logger.critical('–¢–∞–∫–æ–π –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ!')

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    msgs = [
                        message('warning', '–¢–∞–∫–æ–π –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ! üôÅ'),
                        message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                                event_url=event['url'])
                                ),
                    ]
                    render_messages(request, msgs)
                    return redirect('error')
                else:
                    logger.info('\n–ó–∞–∫–∞–∑ {order_uuid} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î'.format(order_uuid=order['order_uuid']))

                    for t in order['tickets']:
                        try:
                            OrderTicket.objects.create(
                                id=t['ticket_uuid'],
                                order_id=order['order_uuid'],
                                ticket_service_id=ticket_service['id'],
                                ticket_service_order=order['order_id'],
                                is_punched=False,
                                bar_code=t['bar_code'],
                                sector_id=t['sector_id'],
                                sector_title=t['sector_title'],
                                row_id=t['row_id'],
                                seat_id=t['seat_id'],
                                seat_title=t['seat_title'],
                                price_group_id=t['price_group_id'],
                                price=t['price'],
                                domain_id=domain['domain_id']
                            )
                        except IntegrityError:
                            logger.critical('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç –≤ –ë–î!')
                        else:
                            logger.info('–ë–∏–ª–µ—Ç {} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î'.format(t['ticket_uuid']))

                    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ - –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                    if customer['payment'] == 'cash':
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ë–î
                        order['status'] = 'approved'
                        logger.info('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}'.format(
                            status=ORDER_STATUS[order['status']]['description'])
                        )

                        Order.objects.filter(id=order['order_uuid']).update(status=order['status'])

                        # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        customer['delivery_description'] = ORDER_DELIVERY[customer['delivery']]
                        customer['payment_description'] = ORDER_PAYMENT[customer['payment']]
                        customer['status_color'] = ORDER_STATUS[order['status']]['color']
                        customer['status_description'] = ORDER_STATUS[order['status']]['description']

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                        from_email = {}
                        from_email['user'] = ticket_service['settings']['order_email']['user']
                        from_email['pswd'] = ticket_service['settings']['order_email']['pswd']
                        from_email['connection'] = EmailBackend(
                            host=settings.EMAIL_HOST,
                            port=settings.EMAIL_PORT,
                            username=from_email['user'],
                            password=from_email['pswd'],
                            use_tls=settings.EMAIL_USE_TLS,
                        )

                        email_context = {
                            'domain': domain,
                            'event': event,
                            'ticket_service': ticket_service,
                            'payment_service': payment_service,
                            'order': order,
                            'customer': customer
                        }

                        admin_email = EmailMessage(
                            'order/email_admin.tpl',
                            email_context,
                            from_email['user'],
                            (from_email['user'],),
                            connection=from_email['connection']
                        )
                        customer_email = EmailMessage(
                            'order/email_customer.tpl',
                            email_context,
                            from_email['user'],
                            (customer['email'],),
                            connection=from_email['connection']
                        )
                        admin_email.send()
                        logger.info('Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                        customer_email.send()
                        logger.info('Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

                        return redirect('order:confirmation', order_uuid=order['order_uuid'])
                    # –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ - –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
                    elif customer['payment'] == 'online':
                        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
                        payment_create = ps.payment_create(
                            event_uuid=event['event_uuid'],
                            event_id=event['id'],
                            customer=customer,
                            order=order
                        )

                        logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã: {payment_create}'.format(payment_create=payment_create))

                        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω—ã–π
                        if payment_create['success']:
                            logger.info('\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ')

                            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ–ø–ª–∞—Ç—ã
                            payment_id = payment_create['payment_id']
                            payment_url = payment_create['payment_url']

                            now = timezone_now()
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã –≤ –ë–î
                            Order.objects.filter(id=order['order_uuid']).update(
                                datetime=now,
                                payment_id=payment_id
                            )
                            logger.info('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–ª–∞—Ç—ã: {payment_id}'.format(payment_id=payment_id))
                            logger.info('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ URL –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Ñ–æ—Ä–º—ã...')

                            # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ URL –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
                            return redirect(payment_url)
                        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ù–ï—É—Å–ø–µ—à–Ω—ã–π
                        else:
                            logger.info('\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ù–ï—É—Å–ø–µ—à–Ω–æ')

                            # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
                            order_cancel = ts.order_cancel(
                                event_id=event['id'],
                                order_uuid=order['order_uuid'],
                                order_id=order['order_id'],
                                tickets=order['tickets'],
                            )

                            # –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
                            if order_cancel['success']:
                                logger.info('–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω—ë–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤'.format(
                                    order_id=order['order_id']
                                    )
                                )

                                # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
                                order['status'] = 'cancelled'
                                Order.objects.filter(id=order['order_uuid']).update(status=order['status'])

                                logger.info('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}'.format(
                                    status=ORDER_STATUS[order['status']]['description'])
                                )
                            # –ó–∞–∫–∞–∑ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
                            else:
                                logger.info('–ó–∞–∫–∞–∑ {order_id} –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤'.format(
                                    order_id=order['order_id']
                                    )
                                )

                            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                            msgs = [
                                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. üôÅ'),
                                message(
                                    'error',
                                    '{code} {message}'.format(
                                        code=payment_create['code'],
                                        message=payment_create['message'])
                                ),
                                message(
                                    'info',
                                    'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                                        event_url=event['url'])
                                ),
                            ]
                            render_messages(request, msgs)
                            return redirect('error')
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ù–ï —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
            else:
                logger.critical('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!')

                # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞
                for ticket in order['tickets']:
                    ticket['action'] = 'remove'
                    ticket['order_uuid'] = order['order_uuid']
                    ticket['event_id'] = event['id']
                    remove = ts.reserve(**ticket)

                    if remove['success']:
                        logger.critical(
                            '–£–¥–∞–ª—ë–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤: {sector} {sector_id} {row_id} {seat_id}'.format(
                                sector=ticket['sector_title'],
                                sector_id=ticket['sector_id'],
                                row_id=ticket['row_id'],
                                seat_id=ticket['seat_id'])
                        )
                    else:
                        logger.critical(
                            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤: {sector} {sector_id} {row_id} {seat_id}'.format(
                                sector=ticket['sector_title'],
                                sector_id=ticket['sector_id'],
                                row_id=ticket['row_id'],
                                seat_id=ticket['seat_id'])
                        )

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msgs = [
                    message('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞! üôÅ'),
                    message('info', 'üëâ <a href="{event_url}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –µ—â—ë —Ä–∞–∑</a>.'.format(
                        event_url=event['url'])
                    ),
                ]
                render_messages(request, msgs)
                return redirect('error')

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ POST-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return redirect('/')
