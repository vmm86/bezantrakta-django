#################################
Кэширование записей из моделей БД
#################################

*************
Базовый класс
*************

Кастомизированное файловое кэширование записей в моделях разных приложений проекта с опциональной пред- и/или пост-обработкой хранится в пакете ``project.cache``.

Основные цели использования в проекте кэширования как такового:

* Хранить информацию о конкретных экземплярах какой-либо модели в кэше, чтобы минимизировать обращения к БД на клиентской стороне (в браузере) и обращаться к БД только в случае их редактирования в админ-панели.
* Вместе с тем хранить в кэше не просто представление конкретных объектов из БД, но в том числе некоторые полезные атрибуты, не хранящиеся в БД напрямую (вычисляемые "на лету") или находящиеся в других моделях, связанных с текущей.

Файловое кэширование применяется постольку, поскольку основная бизнес-задача сайтов - быть площадкой для заказа билетов пользователями. Если использовать для кэширование в памяти (в том числе информации о предварительных резервах и заказах), при вынужденной перезагрузке сервера (при обновлении проекта или технических работах) данные о текущих операциях будут потеряны.

Кастомизированный модуль файлового кэширования **Django 1.11** находится в модуле ``project.cache.custom_filebased_cache``.

.. todo:: Лучше не копировать ввсё содержимое класса, а наследовать только те методы, коотрые нужно явно переопределить.

.. note:: Основная задача кастомизации файлового кэширования - сохранение файлов не просто в одну папку для хранения кэша, а в подпапки, именуемые по первому подключу в ключе для создания кэша (подключи разделяются точкой ``.``).

.. autoclass:: project.cache.FileBasedCache

***
Кэш
***
Модуль содержит абстрактный класс-родитель для кэширования экземпляров отдельных моделей.

Для того, чтобы кэширование заработало в отдельном приложении, в приложении должен быть пакет ``cache``, в модулях которого находятся дочерние классы ``ProjectCache``, которые, в свою очередь, импортируются в фабрику для удобного инстанцирования этих классов.

Каждый из дочерних классов должен реализовывать абстрактные методы:

1. ``get_object`` - Получение данных для кэширования из модели в БД или из входного объекта;

  .. note:: Получение данных из входного объекта, а не из таблицы в БД используется, например, при кэшировании запросов метода ``seats_and_prices`` (список цен на билеты и состояние свободных мест в событии), а также при кэшировании предварительных резервов, информация о которых до создания заказа ещё не добавляется в БД. После создания заказа информация берётся уже из БД.

2. ``cache_preprocessing`` - Предобработка значения кэша перед его сохранением;
3. ``cache_postprocessing`` - Постобработка ранее полученного значения кэша перед его возвращением.

.. autoclass:: project.cache.ProjectCache

*******
Фабрика
*******
Фабрика для удобного инстанцирования необходимого дочернего кэширующего класса. Она просматривает импортированные классы для кэширования в ``CACHE_CLASSES`` и пробрасывает в конкретный класс параметры для его инстанцирования.

.. automodule:: project.cache.factory
