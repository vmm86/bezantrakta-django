import uuid

from django.db.models import F
from django.shortcuts import redirect, render

from project.shortcuts import message, render_messages

from bezantrakta.event.cache import get_or_set_cache as get_or_set_event_cache

from third_party.payment_service.cache import get_or_set_cache as get_or_set_payment_service_cache
from third_party.payment_service.cache import payment_service_instance

from third_party.ticket_service.cache import get_or_set_cache as get_or_set_ticket_service_cache
# from third_party.ticket_service.cache import ticket_service_instance

from ..models import Order, OrderTicket
from ..settings import ORDER_DELIVERY, ORDER_PAYMENT, ORDER_STATUS


def confirmation(request, order_uuid):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–ª–∏ –ù–ï—É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ.

    Args:
        order_uuid (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.
    """
    try:
        order_uuid = uuid.UUID(order_uuid)
    except (AttributeError, TypeError, ValueError):
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        msgs = [
            message('error', '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞. üòû'),
            message('info', 'üëâ <a href="/">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a>.'),
        ]
        render_messages(request, msgs)
        return redirect('error')
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        try:
            order = dict(Order.objects.annotate(
                event_uuid=F('event'),
                event_id=F('ticket_service_event'),
                order_id=F('ticket_service_order'),
            ).values(
                'event_uuid',
                'event_id',
                'order_id',
                'ticket_service_id',
                'delivery',
                'address',
                'payment',
                'payment_id',
                'status',
                'tickets_count',
                'total'
            ).get(
                id=order_uuid,
            ))
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
            try:
                order_tickets = list(OrderTicket.objects.filter(order_id=order_uuid).values())
            except OrderTicket.DoesNotExist:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msgs = [
                    message('error', '–í –∑–∞–∫–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞. üòû'),
                    message('info', 'üëâ <a href="/">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a>.'),
                ]
                render_messages(request, msgs)
                return redirect('error')
        except Order.DoesNotExist:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('warning', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üòû'),
                message('info', 'üëâ <a href="/">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a>.'),
            ]
            render_messages(request, msgs)
            return redirect('error')
        else:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –∫—ç—à–∞
            event = get_or_set_event_cache(order['event_uuid'], 'event')

            # # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
            # ticket_service = get_or_set_ticket_service_cache(event['ticket_service_id'])

            # # –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
            # ps = payment_service_instance(event['payment_service_id'])

            # if order['delivery'] == 'courier':
            #     # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
            #     courier_price = ps.decimal_price(ticket_service['settings']['courier_price'])
            #     # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
            #     order['total'] += courier_price

            # if order['payment'] == 'online':
            #     # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã
            #     order['total'] = ps.total_plus_commission(order['total'])

            # –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
            order_info = []
            order_info.append({'key': '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', 'value': order['order_id']})

            order_info.append({
                'key': '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:',
                'value': '<span style="color: {color};">{description}</span>'.format(
                    color=ORDER_STATUS[order['status']]['color'],
                    description=ORDER_STATUS[order['status']]['description'],
                )
            })
            order_info.append({'key': '–ü–æ–ª—É—á–µ–Ω–∏–µ:', 'value': ORDER_DELIVERY[order['delivery']]})
            if order['delivery'] == 'courier':
                order_info.append({'key': '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:', 'value': order['address']})
            order_info.append({'key': '–û–ø–ª–∞—Ç–∞:',    'value': ORDER_PAYMENT[order['payment']]})

            if order['payment'] == 'online' and order['status'] == 'approved':
                order_info.append({'key': '–ù–æ–º–µ—Ä –æ–ø–ª–∞—Ç—ã:', 'value': order['payment_id']})

            context = {}

            context['event'] = event
            context['order'] = order
            context['order']['tickets'] = order_tickets
            context['order']['info'] = order_info

            return render(request, 'order/confirmation.html', context)
