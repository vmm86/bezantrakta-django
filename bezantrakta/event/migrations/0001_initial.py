# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-11 15:01
from __future__ import unicode_literals

import bezantrakta.event.models.container_binder
import bezantrakta.event.models.link
import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Всего не более 60-65 символов', max_length=64, verbose_name='Название')),
                ('slug', models.SlugField(max_length=64, unique_for_date='date', verbose_name='Псевдоним')),
                ('description', models.TextField(help_text='Должно сдержать ключевые слова или фразы,\n        описывающие событие, но не более 3-5 раз.\n\n        Всего не более 150-200 символов', max_length=200, verbose_name='Метатег `description`')),
                ('keywords', models.TextField(help_text='Несколько ключевых слов или фраз,\n        разделённых запятыми, которые описывают содержимое текста.\n\n        Всего не более 100-150 символов', max_length=150, verbose_name='Метатег `keywords`')),
                ('text', ckeditor.fields.RichTextField(verbose_name='Описание события')),
                ('is_published', models.BooleanField(default=False, verbose_name='Публикация')),
                ('is_on_index', models.BooleanField(default=False, verbose_name='На главной')),
                ('min_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Минимальная цена билета')),
                ('min_age', models.PositiveSmallIntegerField(choices=[(0, '0+'), (6, '6+'), (12, '12+'), (16, '16+'), (18, '18+')], default=0, verbose_name='Возрастное ограничение')),
                ('date', models.DateField(verbose_name='Дата события')),
                ('time', models.TimeField(verbose_name='Время начала события')),
                ('domain', models.ForeignKey(db_column='domain_id', on_delete=django.db.models.deletion.CASCADE, to='location.Domain', verbose_name='Домен')),
            ],
            options={
                'db_table': 'bezantrakta_event',
                'verbose_name': 'событие',
                'ordering': ('domain', 'date', 'time', 'title'),
                'verbose_name_plural': 'события',
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Всего не более 60-65 символов', max_length=64, verbose_name='Название')),
                ('slug', models.SlugField(max_length=64, unique=True, verbose_name='Псевдоним')),
                ('description', models.CharField(help_text='Должно сдержать ключевые слова или фразы,\n        описывающие событие, но не более 3-5 раз.\n\n        Всего не более 150-200 символов', max_length=200, verbose_name='Метатег `description`')),
                ('keywords', models.CharField(help_text='Несколько ключевых слов или фраз,\n        разделённых запятыми, которые описывают содержимое текста.\n\n        Всего не более 100-150 символов', max_length=150, verbose_name='Метатег `keywords`')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'категория событий',
                'verbose_name_plural': 'категории событий',
                'ordering': ('title',),
                'db_table': 'bezantrakta_event_category',
            },
        ),
        migrations.CreateModel(
            name='EventContainer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='Название')),
                ('slug', models.SlugField(max_length=32, verbose_name='Псевдоним')),
                ('order', models.PositiveSmallIntegerField(default=1, verbose_name='Порядок')),
                ('img_width', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Ширина афиши')),
                ('img_height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Высота афиши')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'контейнер',
                'verbose_name_plural': 'контейнеры',
                'ordering': ('order', 'is_published', 'title'),
                'db_table': 'bezantrakta_event_container',
            },
        ),
        migrations.CreateModel(
            name='EventContainerBinder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order', models.PositiveSmallIntegerField(default=1, verbose_name='Порядок в контейнере')),
                ('img', models.ImageField(blank=True, null=True, upload_to=bezantrakta.event.models.container_binder.img_path, verbose_name='Афиша')),
                ('event', models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='event.Event', verbose_name='Событие')),
                ('event_container', models.ForeignKey(db_column='event_container_id', on_delete=django.db.models.deletion.CASCADE, to='event.EventContainer', verbose_name='Группа событий')),
            ],
            options={
                'db_table': 'bezantrakta_event_container_binder',
                'verbose_name': 'связь событий и контейнеров',
                'ordering': ('order', 'event', 'event_container'),
                'verbose_name_plural': 'связь событий и контейнеров',
            },
        ),
        migrations.CreateModel(
            name='EventGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Всего не более 60-65 символов', max_length=64, verbose_name='Название')),
                ('slug', models.SlugField(max_length=64, verbose_name='Псевдоним')),
                ('is_published', models.BooleanField(default=False, verbose_name='Публикация')),
                ('is_on_index', models.BooleanField(default=False, verbose_name='На главной')),
                ('domain', models.ForeignKey(db_column='domain_id', on_delete=django.db.models.deletion.CASCADE, to='location.Domain', verbose_name='Домен')),
            ],
            options={
                'db_table': 'bezantrakta_event_group',
                'verbose_name': 'группа событий',
                'ordering': ('id', 'title'),
                'verbose_name_plural': 'группы событий',
            },
        ),
        migrations.CreateModel(
            name='EventGroupBinder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event', models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='event.Event', verbose_name='Событие')),
                ('event_group', models.ForeignKey(db_column='event_group_id', on_delete=django.db.models.deletion.CASCADE, to='event.EventGroup', verbose_name='Группа событий')),
            ],
            options={
                'verbose_name': 'связка событий и групп событий',
                'verbose_name_plural': 'связки событий и групп событий',
                'db_table': 'bezantrakta_event_group_binder',
            },
        ),
        migrations.CreateModel(
            name='EventLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='Название')),
                ('slug', models.SlugField(max_length=32, verbose_name='Псевдоним')),
                ('img', models.ImageField(blank=True, help_text='Размер логотипа 192x64 px', null=True, upload_to=bezantrakta.event.models.link.img_path, verbose_name='Логотип')),
            ],
            options={
                'verbose_name': 'ссылка',
                'verbose_name_plural': 'ссылки',
                'ordering': ('title',),
                'db_table': 'bezantrakta_event_link',
            },
        ),
        migrations.CreateModel(
            name='EventLinkBinder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('href', models.URLField(blank=True, verbose_name='Внешняя ссылка')),
                ('order', models.PositiveSmallIntegerField(default=1, verbose_name='Порядок')),
                ('event', models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='event.Event', verbose_name='Событие')),
                ('event_link', models.ForeignKey(db_column='event_link_id', on_delete=django.db.models.deletion.CASCADE, to='event.EventLink', verbose_name='Ссылки')),
            ],
            options={
                'db_table': 'bezantrakta_event_link_binder',
                'verbose_name': 'связь событий и ссылок',
                'ordering': ('order', 'event', 'event_link'),
                'verbose_name_plural': 'связь событий и ссылок',
            },
        ),
        migrations.CreateModel(
            name='EventVenue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Всего не более 60-65 символов', max_length=64, verbose_name='Название')),
                ('slug', models.SlugField(max_length=64, verbose_name='Псевдоним')),
                ('domain', models.ForeignKey(db_column='domain_id', on_delete=django.db.models.deletion.CASCADE, to='location.Domain', verbose_name='Домен')),
            ],
            options={
                'db_table': 'bezantrakta_event_venue',
                'verbose_name': 'зал',
                'ordering': ('domain', 'title'),
                'verbose_name_plural': 'залы',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='event_category',
            field=models.ForeignKey(blank=True, db_column='event_category_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='event.EventCategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_container',
            field=models.ManyToManyField(blank=True, through='event.EventContainerBinder', to='event.EventContainer', verbose_name='Контейнеры, в которых отображается событие'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_group',
            field=models.ManyToManyField(blank=True, through='event.EventGroupBinder', to='event.EventGroup', verbose_name='Группа, в которую входит событие'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_link',
            field=models.ManyToManyField(blank=True, through='event.EventLinkBinder', to='event.EventLink', verbose_name='Ссылки, добавленные к событию'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_venue',
            field=models.ForeignKey(db_column='event_venue_id', on_delete=django.db.models.deletion.CASCADE, to='event.EventVenue', verbose_name='Зал'),
        ),
        migrations.AlterUniqueTogether(
            name='eventvenue',
            unique_together=set([('domain', 'slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventlinkbinder',
            unique_together=set([('event', 'event_link')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventgroup',
            unique_together=set([('domain', 'slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventcontainerbinder',
            unique_together=set([('event', 'event_container', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together=set([('domain', 'date', 'slug')]),
        ),
    ]
