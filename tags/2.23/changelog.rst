История изменений
=================

Разные версии проекта хранятся в разных ``SVN``-тегах в папке ``tags``.

Версия 2.23
-----------
Добавлен функционал работы с сервисным сбором при заказе билетов.

Версия 2.22
-----------
Добавлены кастомные **JSON-настройки в событиях**. На данный момент настройки содержат:

* возможность в отдельном событии *включать/отключать варианты заказа билетов в отдельных событиях* в параметре ``order``, который переопределяет содержимое такого же параметра ``order`` в JSON-настройках сервиса продажи билетов. Если тот или иной вариант заказа билетов включен в настройках сервиса продажи билетов, но отключен в настройках события - он НЕ будет отображаться на шаге 2 заказа билетов.
* возможность в отдельном событии задать *сервисный сбор в процентах от цены каждого билета в заказе* для разных вариантов заказа билетов в параметре ``extra``. По умолчанию сервисный сбор равен 0 и в этом случае НЕ используется. Если сервисный сбор больше 0 - к общей сумме заказа добавляется указанный процент от цены каждого из билетов в заказе.

JSON-настройки в других приложениях (``location``, ``ticket_service``, ``payment_service``) также формируются "на лету" из содержимого параметра в модуле ``settings.py`` соответствующего приложения, а не из текстового .json-файла, что позволяет создавать ключи в нужном порядке при использовании ``OrderedDict``.

Версия 2.21
-----------
При выполнении задания ``ts_discover`` в импортированных ранее (уже имеющихся в БД) группах/событиях *обновляется только изменившееся информация* (которая изменилась в сервисе продажи билетов и соответственно должна быть изменена и в БД).

Версия 2.20
-----------
Добавлена возможность указывать реквизиты **промоутеров** (организаторы событий) и **агентов** (продавцы билетов) для вывода в шаблоне PDF-билета. В настройках сервиса продажи билетов добавлены параметры ``promoter`` и ``seller`` как значения по умолчанию для всех его событий. В свою очередь, в модели ``event.Event`` для каждого события добавлены поля ``promoter`` и ``seller``, специфичные для каждого события. НЕпустые параметры в событии имеют более высокий приоритет по сравнению со значениями по умолчанию в сервисе продажи билетов.

Версия 2.19
-----------
Оптимизация завершения оформления заказа при использовании онлайн-оплаты.

Проверка онлайн-оплаты с подтверждением либо отменой заказа вынесена в отдельную функцию ``success_or_error``. Она вызывается как при выполнении ``payment_handler`` (возвращение на сайт с формы онлайн-оплаты), так и при запуске ``ps_checkup`` (менеджмент-команда на проверку незавершённых онлайн-оплат). В обоих случаях явно проверяется статус онлайн-оплаты, затем заказ в зависимости от результата подтверждается либо отменяется.

Если метод подтверждения либо отмены заказа в сервисе продажи билетов НЕ завершился успешно, заказ остаётся в статусе "*создан*" до следующего запуска задания ``ps_checkup``.

Версия 2.18
-----------
Кэширование информации о географии сайта (города и сайты), в первую очередь для использования в ``bezantrakta.location.middleware.CurrentLocationMiddleware``.

Версия 2.17
-----------
Переработано кэширование событий/групп с переопределением некоторых их параметров, а также их вывод на сайте.

При кэшировании информации о группе в её кэш добавляется список UUID актуальных событий в ней ``events_in_group``, а также UUID самого раннего актуального события в ней на данный момент ``earliest_published_event_in_group``.

При получении кэша группы *некоторые параметры группы заменяются на параметры её самого раннего актуального события*, на которое должна вести афиша группы при её показе в каком-либо контейнере (в том числе в маленьких вертикальных афишах "на главной").

При получении кэша события *некоторые параметры события подменяются на параметры группы, если событие в неё входит*, чтобы НЕ редактировать множество дочерних событий, некоторые параметры которых можно единожды указать в их родительской группе.

В админ-панели *в группу можно добавить только те актуальные события, которые ещё НЕ были добавлены в другую группу*. **Одно и то же событие нельзя добавить более чем в одну группу!**.

При обновлении кэша группы принудительно обновляется кэш всех её актуальных событий. При обновлянии кэша события принудительно обновляется кэш её группы, если событие в неё входит.

Добавлена работа с сервисом онлайн-оплаты в **СургутНефтеГазБанк** (СНГБ).

Версия 2.16
-----------
Серьёзная переработка серверного кэширования объектов моделей разных приложений проекта. Создан единый абстрактный родительский класс-адаптер ``ProjectCache``, которому наследуют конкретные классы для кэширования в каждом отдельном приложении. Предварительно обработанный кэш возвращается с помощью фабрики``cache_factory``. Если для работы со сторонним сервисом (продажи билетов или онлайн-оплаты) необходим экземпляр его класса, он добавляется к возвращаемому значению кэша в параметре ``instance``.

Версия 2.15
-----------
Существенные коррективы стилей основного сайта и процесса заказа билетов - декостылизация по мере возможности.

Глобальная статика проекта ``project.static`` согласно его базовым настройкам собирается в папку ``global``, поэтому в проекте её содержимое вынесено в папку ``static`` внутри ``project`` без дополнительной ещё одной вложенной папки ``global``. Также в путях ко всем JS-плагинам указана их актуальная версия.

Обновление **jQuery** до версии *3.2.1* и карусели больших горизонтальных афиш на базе **bxSlider** до версии *4.2.12*.

Добавлен JS-плагин **waypoints** версии *4.0.1* для выполнения событий на странице, когда при прокрутке пользователь достигает того или иного элемента. Например, в админ-панели блок для редактирования экземпляра модели при прокрутке фиксированно позиционируется внизу страницы.

Скрипт для выбора города и запоминания его в cookie оптимизирован и перенесён из статики в шаблоны проекта.

Версия 2.14
-----------
Метод сервиса продажи билетов ``seats`` переименован в ``seats_and_prices`` для обозначения того, что он возвращает не только освободные места в событии, но и список цен на билеты по возрастанию. Соответственно откорректировано получение минимальной цены в событии при её отсутствии из результата выполнения этого метода в задании ``ts_discover``.

Возможность скрывать места НЕ в продаже в секторах без фиксированной рассадки сделана опциональной по булеву параметру ``hide_sold_non_fixed_seats`` в настройках сервиса продажи билетов.

Версия 2.12
-----------
Текстовые поля псевдонима в моделях ``ticket_service.TicketService`` и ``payment_service.PaymentService`` заменены на выбор из нескольких имеющихся вариантов. При редактировании в админ-панели виджет для редактирования псевдонима изменён с текстового поля на радиокнопки для выбора заранее заданных choices.

Версия 2.11
-----------
*Список цен на билеты* в событии может меняться как при изменении цен в сервисе продажи билетов, так и при продаже всех билетов на какую-то цену. Поэтому список цен теперь НЕ сохраняется в каждом событии в модели ``event.Event``, а приходит на страницу события вместе со списком свободных для продажи мест в методе ``seats`` и динамически отображается в легенде схемы зала.

На шаге 1 заказа билетов появилась возможность в секторах, явно отмеченных как *секторы без сидячих мест* (маркированные списки ``ul`` с классом ``no-fixed-seats``), *оставлять только актуальные кликабельные места*. Остальные пункты списка удаляются после получения списка свободных для продажи мест с помощью метода ``seats``.

Версия 2.10
-----------
В некоторых inline-формах, связанных с базовой формой редактирования экземпляра модели, добавлена иконка для редактирования связанной по внешнему ключу записи в новом окне.

В приложении ``simsim`` добавлены фильтры в выпадающих списках как временная замена дополнению ``django-admin-list-filter-dropdown``. Теперь фильтры работают правильно, отображая в том числе только связанные и уникальные записи по внешнему ключу в ``RelatedOnlyFieldDropdownFilter``.

Версия 2.9
----------
Некоторая информация из группы переопределяет информацию каждого события, которое привязано к этой группе:

* название
* описание для метатега ``description``
* текстовое описание
* ограничение по возрасту
* афиша в позиции ``small_vertical``

Переопределяемая информация выводится на странице события, принадлежащего группе, а также используется при генерации электронных билетов, заказанных в этом событии.

При фильтрации событий по категориям *у событий в группе можно НЕ указывать категорию* - она также берётся из группы.

Это позволяет **НЕ редактировать каждое из событий в группе**, особенно если они импортируются много и часто, а вместо этого **единожды отредактировать информацию самой группы** и после этого просто *пакетно публиковать события*, вновь добавляемые в неё в админ-панели с помощью группового действия "*Опубликовать или снять в с публикации выбранные события или группы*".

При обновлении кэша группы в админ-панели также обновляется кэш всех её актуальных событий.

Версия 2.8
----------
Большое обновление клиентского JS-кода процесса заказа билетов в браузере.

Версия 2.7
----------
Добавлена модель ``TicketServiceSchemeSector`` для хранения схем отдельных секторов в больших сложных залах. Большую схему зала при необходимости можно представить как общую схему со ссылками на схемы отдельных секторов или даже на схемы разных участков одного и того же сектора.

Версия 2.6
----------
Серьёзная оптимизация задания ``ts_discover`` по импорту информации из подключенных к сайтам сервисов продажи билетов. Информация из одного и того же сервиса продажи билетов, подключенного к разным сайтам, **запрашивается только один раз** и хранится во временном кэше в памяти, а затем для того или иного сайта из кэша берётся только нужная для него информация.

Версия 2.5
----------
Упрощена генерация абсолютных URL-адресов с помощью функции ``build_absolute_url`` в пакете ``project.shortcuts``. Этой функции на вход передаётся псевдоним (поддомен) текущего сайта, а в ней самой конструируется полный URL с учётом протокола (``HTTP`` или ``HTTPS``), полного домена текущего сайта и опциональной относительной ссылки.

Афиши упрядочиваются по дате/времени по возрастанию при равенстве позиций в контейнере *в любых контейнерах*.

Перед афишами в больших контейнерах можно добавлять баннеры из соответствующих групп баннеров в админ-панели (с произвольными ссылками или без ссылок).

Версия 2.4
----------
*При фильтрации событий* на сайте (по дате, по категории или в текстовом поиске) **выводятся только события** (афишами в позиции "*маленькие вертикальные*"). Афиши групп выводятся только в конкретных контейнерах, позиции в которых были явно заданы для группы в админ-панели. И группы, и события для показа на сайте **обязательно должны быть опубликованы**!

*Маленькие вертикальные афиши* нужно в любом случае добавлять *для единичных событий* (НЕ входящих в группу) и *для групп*, которые требуется публиковать на сайте. При отсутствии маленькой вертикальной афиши для опубликованного события/группы будет выводиться картинка-заглушка с логотипом Безантракта.

Маленькие вертикальные афиши работают следующим образом:

* Если позиция *равна 0* - афиша *НЕ выводится на главной*, но используется для показа при фильтрации событий на сайте (по дате, по категории или в текстовом поиске), а также при генерации электронных билетов.
* Если позиция *больше 1* - афиши выводятся на главной (при включенной галочке "*На главной*").
* Если позиции афиш в контейнере *больше 1 и одинаковые* - афиши сортируются по дате/времени. Это удобно, если события, как правило, не нужно сортировать в произвольном порядке, а только по дате/времени.

В вариантах заказа билетов на шаге 2 в любом случае выбирается первый (или единственный) из активных вариантов, даже если покупатель ранее не совершал заказ. Это сделано во избежание ошибок при подтверждении заказа - для того, чтобы какой-то из вариантов заказа уже был выбран автоматически (особенно, если этот вариант - единственный, доступный на сайте).

Версия 2.3
----------
В настройках сервиса онлайн-оплаты удалён параметр ``commission_included`` - величина параметра ``commission`` прибавляется к сумме заказа, только если она НЕ равна ``0``.

В шаблоне шага 2 заказа билетов любые наценки к базовой сумме заказа выводятся в отдельном блоке под блоком "*Всего*" и только в том случае, если эти наценки явно присутствуют.

Версия 2.2
----------
В шаблонах и в логике заказа билетов абсолютные ссылки не пишутся вручную, а формируются автоматически с учётом того, работает ли сайт по HTTP или HTTPS.

Вместе с этим серьёзно переписан шаблон проекта ``index.html`` и шаблоны процесса заказа билетов ``event.html``, ``checkout.html``, ``confirmation.html`` для уменьшения дублирования кода и рассредоточения логики в разных шаблонах с расширением (наследованием). Все эти шаблоны наследуют от базового шаблона ``base.html``, коотрый содержит каркас HTML-страницы с блоками включений, содержимое которых может меняться в дочерних шаблонах.

Версия 2.1
----------
Непустые модули приложений (``admin``, ``models``, ``views``) преобразованы в пакеты.

Версия 2.0
----------
Добавлен пакет ``third_party`` для работы со сторонними сервисами. Он содержит 2 приложения:

* ``ticket_service`` - сервисы продажи билетов.
* ``payment_service`` - сервисы онлайн-оплаты.

Работа со сторонними сервисами осуществляется на основе абстрактного базового класса и наследующих ему классов конкретных сторонних сервисов в соответствии с шаблоном проектирования "*Адаптер*" (и отчасти "*Стратегия*").

**Схемы залов** импортируются из сервисов продажи билетов в модель ``ticket_service.TicketServiceSchemeVenueBinder`` при выполнении задания ``ts_discover``. В модели ``event.EventVenue`` находятся **залы**, по сути - это *места проведения событий*, которые могут содержать в себе разные площадки для проведения событий с разными схемами залов.

Для того, чтобы импортировать события с какой-либо схемой зала в базу данных сайта, эту схему зала необходимо предварительно привязать к её залу, добавленному в БД сайте ранее.

Версия 1.1
----------
Правильная работа с датой/временем.

Дата/время какой-либо сайто-зависимой модели в ``DateTimeField``:

* сохраняется в базу данных в нулевом часовом поясе (``UTC``);
* выводится в часовом поясе связанного с этой моделью сайта (через его связь с городом).

Группы и события находятся в одной модели ``event.Event`` и различаются булевым полем ``is_group``. События в группе добавляются в дочернюю M2M-модель ``event.EventGroupBinder``. На сайте выводятся как события (с прямой ссылкой на себя), так и группы (со ссылкой на самое первое опубликованное ещё НЕ прошедшее событие в этой группе).

Календарь событий на основе JS-плагина ``fullcalendar``. Можно перемещаться между месяцами, при клике на дату в текущем месяце выводятся события или группы на эту дату (если они имеются) либо сообщение об их отсутствии.

Коррективы моделей ``event.EventContainerBinder``, ``event.EventLinkBinder``.

В модель ``location.City`` добавлен вывод человекопонятной разницы во времени с ``UTC``.

JS-скрипты с главной страницы вынесены в отдельные шаблоны ``bottom_scripts.html`` и ``counters.html``.

Версия 1.0
----------
Базовый функционал без билетных и оплатных сервисов, пока только с внешними ссылками на другие сайты по продаже билетов.
