from django.conf import settings
from django.db.models import CharField, Case, When, Value, Q
from django.http.request import split_domain_port
from django.shortcuts import render
from django.utils import timezone
from django.utils.deprecation import MiddlewareMixin

from project.cache import cache_factory
from project.shortcuts import build_absolute_url, message, render_messages

from .models import City


class CurrentLocationMiddleware(MiddlewareMixin):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≥–æ—Ä–æ–¥–µ –∏ —Å–∞–π—Ç–µ –∏ –µ—ë –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ``request``."""
    def process_request(self, request):
        http_or_https = 'https://' if settings.BEZANTRAKTA_IS_SECURE else 'http://'
        host = request.get_host()
        url_domain, url_port = split_domain_port(host)
        root_domain = settings.BEZANTRAKTA_ROOT_DOMAIN
        root_domain_slug = settings.BEZANTRAKTA_ROOT_DOMAIN_SLUG
        # –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ–¥–¥–æ–º–µ–Ω
        if url_domain.endswith(root_domain):
            domain_slug = url_domain[:-len(root_domain)].rstrip('.')
            # –û–±—Ö–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
            domain_slug = root_domain_slug if domain_slug == '' else domain_slug

        # –ü–æ–ª–Ω—ã–π URL –±–µ–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (query string)
        path = request.get_full_path().split('?')[0]

        request.http_or_https = http_or_https
        request.root_domain = root_domain
        request.url_domain = url_domain
        request.url_path = path

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–∞–π—Ç–µ –∏–∑ –∫—ç—à–∞
        domain = cache_factory('domain', domain_slug)

        # –ï—Å–ª–∏ —Å–∞–π—Ç –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—à–∏–±–∫–∞ 500
        if domain is None:
            request.domain_is_published = False
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ —Å–∞–π—Ç–∞ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç. üôÅ'),
            ]
            render_messages(request, msgs)
            return render(request, 'error.html', status=500)
        # –ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
        request.domain_id = domain['domain_id']
        request.domain_title = domain['domain_title']
        request.domain_slug = domain['domain_slug']
        request.domain_is_published = domain['domain_is_published']
        request.domain_settings = domain['domain_settings']

        request.city_title = domain['city_title']
        request.city_slug = domain['city_slug']
        request.city_timezone = domain['city_timezone']
        request.city_state = domain['city_state']

        # URL —Å–∞–π—Ç–∞ (–ø—Ä–æ–∫–æ—Ç–æ–ª + –¥–æ–º–µ–Ω) –±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ (–¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º)
        request.url_protocol_domain = domain['url_protocol_domain']
        # –ü–æ–ª–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        request.url_full = build_absolute_url(request.domain_slug, path)

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω - —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ—à–∏–±–∫–∞ 500)
        if request.city_state is False:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è. üôÅ'),
            ]
            render_messages(request, msgs)
            return render(request, 'error.html', status=500)
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ - "—Å–∫–æ—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ" (–æ—à–∏–±–∫–∞ 503)
        elif request.city_state is None:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msgs = [
                message('error', '–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ.'),
            ]
            render_messages(request, msgs)
            return render(request, 'error.html', status=503)
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤–∫–ª—é—á–µ–Ω
        elif request.city_state is True:
            # –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω - —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 503)
            if not request.domain_is_published:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msgs = [
                    message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'),
                    message('error', '–ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. üöß'),
                ]
                render_messages(request, msgs)
                return render(request, 'error.html', status=503)
            # –ï—Å–ª–∏ –∏ –≥–æ—Ä–æ–¥, –∏ –¥–æ–º–µ–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
            else:
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                if request.city_timezone:
                    # –ù–∞ —Å–∞–π—Ç–µ (–Ω–æ –Ω–µ –≤ –∞–¥–º–∏–Ω–∫–µ!) –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞ –∏–∑ –ë–î
                    if settings.BEZANTRAKTA_ADMIN_URL not in request.url_path:
                        current_timezone = request.city_timezone
                    else:
                        current_timezone = request.COOKIES.get('bezantrakta_admin_timezone', 'Europe/Moscow')
                    timezone.activate(current_timezone)
                # –ò–Ω–∞—á–µ - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (UTC)
                else:
                    timezone.deactivate()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            try:
                cities = City.objects.annotate(
                    status=Case(
                        When(state=True, then=Value('ready')),
                        default=Value('coming-soon'),
                        output_field=CharField()
                    ),
                ).filter(
                    Q(state=True) | Q(state=None),
                ).values(
                    'title',
                    'slug',
                    'state',
                    'status'
                )
            except City.DoesNotExist:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msgs = [
                    message('error', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞. üôÅ'),
                ]
                render_messages(request, msgs)
                return render(request, 'error.html', status=500)
            else:
                request.cities = list(cities)
                # –ü—Å–µ–≤–¥–æ–Ω–∏–º –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫—É–∫–∏ `bezantrakta_city`
                request.bezantrakta_city = request.COOKIES.get('bezantrakta_city', None)
